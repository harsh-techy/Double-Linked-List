#include<stdio.h>
#include<stdlib.h>
#include<conio.h>

struct node
{ int data;
  struct node *prev,*next;
}*head = NULL;

void newDLL()
{
  struct node *t = NULL;
  struct node *p = NULL;
  t = (struct node*)malloc(sizeof(struct node));
  scanf("%d",&(t->data));
  t->prev=NULL;
  t->next=NULL;
  if(head == NULL)
  { head = t; }
  else{ 
    p = head;
    while(p->next!= NULL)
      p=p->next;
    t->prev=p;
    p->next= t;
  }
}

void display()
{
  struct node *q = head;
  if(head == NULL)
    printf("\nEmpty List");
  else{
    printf("\nHEAD");
    while(q!= NULL)
    { printf("<->%d",q->data);
      q=q->next;                }
    printf("<->NULL");
  }
}

void addbeg()
{
  char ch='y';
  do{
  struct node *newNode = (struct node*) malloc (sizeof(struct node));
  printf("\nEnter data :");
  scanf("%d",&newNode->data);
  newNode->prev = NULL;
  newNode->next = head;
  if(head !=NULL)
  { head->prev = newNode; }
  head = newNode;
  printf("Done");
  printf("\tAdd more at beginning?? Y or N:");
  ch=getch();
  printf("%c",ch);
  }while(ch=='Y'||ch=='y');
}

void addend()
{
  char ch='y';
  do{
  struct node *newNode;
  newNode = (struct node*) malloc(sizeof(struct node));
  printf("\nEnter data :");
  scanf("%d",&newNode->data);
  newNode->next = NULL;
  newNode->prev = NULL;
  struct node *temp = head;
  if(head == NULL)
    head = newNode;
  else
  {
   while(temp->next != NULL)
   { temp = temp->next; }
   newNode->prev=temp;
   temp->next = newNode;
  }
  printf("Done");
  printf("\tAdd more at end?? Y or N:");
  ch=getch();
  printf("%c",ch);
  }while(ch=='Y'||ch=='y');
}

void addpos()
{
  int pos;
  char ch='y';
  do{
  struct node *newNode;
  newNode = (struct node*) malloc(sizeof(struct node));
  newNode->prev=NULL;
  printf("\nEnter Position :");
  scanf("%d",&pos);
  printf("Enter data :");
  scanf("%d",&newNode->data);
  if(pos==1)
  {  
    if(head != NULL)
      newNode->next=head;
    head = newNode;
  }
  else{
   struct node *temp = head;
   for(int i=2; i < pos; i++) 
   {  if(temp->next != NULL) 
        temp = temp->next;    }
   temp->next->prev=newNode;
   newNode->prev=temp;
   newNode->next = temp->next;
   temp->next = newNode;
  }
  printf("Done");
  printf("\tAdd more at position?? Y or N:");
  ch=getch();
  printf("%c",ch);
  }while(ch=='Y'||ch=='y');
}

void delbeg()
{
  char ch='y';
  do{
  if(head == NULL)
  { printf("\nEmpty List");
    break;  }
  else if(head->next==NULL)
  { head = NULL;
    printf("\nDone");  }
  else
  { head=head->next;
    head->prev=NULL;
    printf("\nDone"); }
  printf("\tdelete more at beginning?? Y or N:");
  ch=getch();
  printf("%c",ch);
  }while(ch=='Y'||ch=='y');
} 
void delend()
{
  char ch='y';
  do{
  struct node* temp = head;
  if(temp == NULL)
  { printf("\nEmpty List");
    Break; }
  else if(head->next==NULL)
  { head = NULL;
    printf("\nDone"); }
  else
  {
   while(temp->next->next!=NULL)
     temp = temp->next;
   temp->next = NULL;
   printf("\nDone");
  }
  printf("\tdelete more at end?? Y or N:");
  ch=getch();
  printf("%c",ch);
  }while(ch=='Y'||ch=='y');
}  

void delpos()
{
  char ch='y';
  do{
  if(head == NULL)
  { printf("\nEmpty List");
    break; }
  else
  {
   int pos;
   printf("\nEnter Position :");
   scanf("%d",&pos);
   if(pos==1 && head->next==NULL) 
     head = NULL;
   else if(pos==1)
   { head=head->next;
     head->prev=NULL; }
   else{
     struct node *temp = head;
     for(int i=2; i< pos; i++) 
     {  if(temp->next!=NULL) 
         temp = temp->next;  }
     temp->next = temp->next->next;
     temp->next->prev=temp;
    }
  }
  printf("Done");
  printf("\tdelete more at position?? Y or N:");
  ch=getch();
  printf("%c",ch);
  }while(ch=='Y'||ch=='y');
}

int main()
{
  int c,size,i,x=1;
  printf("\n=============================================================\n");
  printf("New List :-\n");
  printf("\tEnter initial size of new list :");
  scanf("%d",&size);
  for(i=0;i<size;i++)
  { printf("Enter Data %d:",i+1);
    newDLL();  }
  printf("\t\tLinked List Created!!");
  do {
   printf("\n------------------------------------------------------------\n");
   printf("1.New Node(First)   \t2.New Node(Last)     \t3.New Node(AtPosition)\n");
   printf("4.Delete Node(First)\t5.Delete Node(Last)  \t6.Delete Node(AtPosition)\n");
   printf("7.Display           \t8.exit");
   printf("\n\t\tEnter Choice :");
   scanf("%d",&c);
   printf("----------------------------------------------------------------");
   switch(c)
   {
     case 1: {addbeg(); break;  }
     case 2: {addend(); break;  }
     case 3: {addpos(); break;  }
     case 4: {delbeg(); break;  }
     case 5: {delend(); break;  }
     case 6: {delpos(); break;  }
     case 7: {display(); break; }
     case 8: {x=0;break;exit(0);}
     default:{printf("\t\tError!!!!!"); break;}
   }
  }while(x);
  printf("\n=============================================================\n");
  return 0;
}
